scalar DateTime

type Query {
  quark(name: String!): Quark
  quarks: [Quark!]!
  gluons: [Gluon!]!
  quarkTypes: [QuarkType!]!
  users: [User!]!
  publishedPosts: [Post!]!
  post(postId: ID!): Post
  postsByUser(userId: ID!): [Post!]!
}

type Mutation {
  createQuark(name: String!, description: String!): Quark
  updateQuark(
	quarkId: ID!,
  	name: String,
	description: String,
	start: DateTime,
	end: DateTime,
	startAccuracy: String,
	endAccuracy: String,
	isMomentary: Boolean,
	url: String,
	quarkTypeId: ID
	isPrivate: Boolean,
	isExclusive: Boolean,
	userId: ID
	): Quark
  createGluon(activeId: ID!, passiveId: ID!, relation: String!): Gluon
  deleteQuark(quarkId: ID!): Quark
  deleteGluon(gluonId: ID!): Gluon

  createQuarkType(
        name: String,
	imagePath: String,
	nameProp: DateTime,
	startProp: DateTime,
	endProp: String,
	hasGender: Boolean,
	sort1: Int,
	sort2: Int
	): QuarkType

  createUser(name: String!, password: String!): User
  deleteUser(userId: ID!): User
  createDraft(title: String!, userId: ID!): Post
  publish(postId: ID!): Post
}

type Quark {
  id: ID!
  name: String!
  imagePath: String
  description: String
  start: DateTime
  end: DateTime
  startAccuracy: String
  endAccuracy: String
  isMomentary: Boolean
  url: String
  affiliate: String
  gender: Boolean
  isPrivate: Boolean
  isExclusive: Boolean
  author: User
  lastModifiedUser: User
  wid: Int
  quarkType: QuarkType
  createdAt: DateTime!
  updatedAt: DateTime!
  actives: [Gluon!]!
  passives: [Gluon!]!
}

type Gluon {
  id: ID!
  activeQuark: Quark!
  passiveQuark: Quark!
  relation: String!
  start: DateTime
  end: DateTime
  startAccuracy: String
  endAccuracy: String
  isMomentary: Boolean
  url: String
  isPrivate: Boolean
  isExclusive: Boolean
  author: User
  lastModifiedUser: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type QuarkType {
  id: ID!
  name: String!
  imagePath: String!
  nameProp: String!
  startProp: String!
  endProp: String!
  hasGender: Boolean
  sort: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User {
  id: ID!
  email: String
  name: String!
  password: String!
  role: String
  createdAt: DateTime!
  updatedAt: DateTime!
  posts: [Post!]!
}

type Post {
  id: ID!
  title: String!
  published: Boolean!
  author: User
}
