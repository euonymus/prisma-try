type User {
  id: ID! @unique
  email: String @unique
  name: String! @unique
  password: String!
  role: String
  createdAt: DateTime!
  updatedAt: DateTime!
  posts: [Post!]!
}

type Post {
  id: ID! @unique
  title: String!
  published: Boolean! @default(value: "false")
  author: User
}

type Quark {
  id: ID! @unique
  name: String! @unique
  imagePath: String
  description: String
  start: DateTime
  end: DateTime
  startAccuracy: String
  endAccuracy: String
  isMomentary: Boolean @default(value: "false")
  url: String
  affiliate: String
  gender: Boolean
  isPrivate: Boolean @default(value: "false")
  isExclusive: Boolean @default(value: "false")
  author: User @relation(name: "QuarkUser")
  lastModifiedUser: User @relation(name: "QuarkLastModifiedUser")
  wid: Int
  quarkType: QuarkType
  createdAt: DateTime!
  updatedAt: DateTime!
  actives: [Gluon!]! @relation(name: "Actives")
  passives: [Gluon!]! @relation(name: "Passives")
}

type Gluon {
  id: ID! @unique
  activeQuark: Quark! @relation(name: "Actives")
  passiveQuark: Quark! @relation(name: "Passives")
  relation: String!
  suffix: String
  start: DateTime
  end: DateTime
  startAccuracy: String
  endAccuracy: String
  isMomentary: Boolean @default(value: "false")
  url: String
  isPrivate: Boolean @default(value: "false")
  isExclusive: Boolean @default(value: "false")
  author: User @relation(name: "GluonUser")
  lastModifiedUser: User @relation(name: "GluonLastModifiedUser")
  createdAt: DateTime!
  updatedAt: DateTime!
}

type QuarkType {
  id: ID! @unique
  name: String! @unique
  imagePath: String!
  nameProp: String!
  startProp: String!
  endProp: String!
  hasGender: Boolean @default(value: "false")
  sort1: Int!
  sort2: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GluonType {
  id: ID! @unique
  name: String! @unique
  caption: String!
  captionJa: String!
  sort1: Int!
  sort2: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}